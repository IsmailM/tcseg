This document describes ParamsContainer and StatsReporter class,
both of which are defined and implemented in the Stats.py file.

The main purpose of these two classes is to allow us to separate the
data involved in a simulation model to be separated from the Python
code that controls the simulation.  By 'data' we mean both input data
in the form of parameters passed to the model when it is initialized,
and output data in the form of reported values for various quantities
generated by the model,

StatsReporter
=============
As its name suggest, a StatsReporter is an object that reports data.
Each instance of this class can generate a separate report during
a run of the model. Thus it is possible to have more reporter active
during a run of the simulation each reporting on different aspects of
the model.

Typically a reporter would take the form of a log that reports the
values as they change of certain key quantities and variables that one
might want to track during a run.  

The StatsReporter class contains methods that facilitate formatting
and outputting the data to an external file that will persist when 
the run is completed.

Creating a StatsReporter. To construct a stats reporter, one would 
use the following Python code:

  from Stats import StatsReporter
  global reporter;
  reporter = StatsReporter('<path_to_the_folder_storing_the_report>')

The only parameter used by the constructor is the *folder* where
the report file will be created and stored. By default, the
report file will be named runYYMMDD-HHMMSS.  In other words, 
report files are named with the word 'run' followed by a timestamp
marking when the file was created.  The first line of the report will
be as follows:

  ---- Starting Run @ yymmdd-hhmmss 150510-125621--------

A good place to create a StatsReporter is inside the configuerSimulation()
method in the ElongagedModel.py file -- e.g.:

  def configureSimulation(sim):
      import CompuCellSetup
      from XMLUtils import ElementCC3D
      # ...
      from Stats import ParamsContainer, StatsReporter
      global reporter; reporter = StatsReporter('../tcseg/Simulation/runs/')

Path Names
==========
Currently, one of the trickiest parts of using StatsReporter is specifying the
path name.  The path to the folder can be given as a *absolute path name* following
the naming conventions of whatever system you are running on.  For example, on 
a Mac, an absolute path name might be:

  /Users/myaccout/Desktop/tcseg/Simulation/runs/

NOTE:
====
This is something we will need to change because it will be difficult to 
share ElongationModel.py and other Python source files if these path names are 
contained in the code. 

Passing a StatsReporter to other objects
========================================
Typically, the StatsReporter object would be passed to the Steppables 
objects so that they can use it to write output:

  from ElongationModelSteppables import Measurements
  s4 = Measurements(sim,_frequency = 100, _reporter=reporter)

StatsReporterMethods
====================
The following public methods are provided:

rprint(args) 
------------- 
The rprint() method takes a comma-separated list of arguments and
prints them to the report file, verbatim, on a single line separated by a
single space.  For example, if the variables a, b, c have the values
10, 20, 30, the following statement

   reporter.rprint('a=', a, 'b=', b, 'c=', c)

would print:

   a=10 b=20 c=30

to the output file.

printLn(args) 
--------------
The printLn() method prints takes a comma-spearated list of arguments 
and prints them to the report file one per line. For example, 

   reporter.printLn(a, b, c)

would print:

   10
   20
   30

to the output file.

printAttrValue(newline, args)
-----------------------------
The printAttrValue() method takes a comma-separated list of arguments
in the form of attribut/value pairs and prints them either on a signle
line (newline=False) or on separate lines (newline=True).  The newline
parameter is optional, which means you can leave it out in which case
it is assumed to be False.

For example, for the same three variables as above, the following
statement:

   reporter.printAttrValue(a=a, b=b, c=c)

would print:

   a=10 b=20 c=30

to the output file.
  
ParamsContainer
===============
ParamsContainer, as its name suggests is an object that holds
parameter settings that can be used by the simulation model. Typically,
a single instance of a ParamsContainer would be created at the setup
stage of the simulation run.  This is typically done in the 
configureSimulation() method of ElongationModel.py:

    from Stats import ParamsContainer, StatsReporter
    global reporter; reporter = StatsReporter('<path_to_runs_folder')
    global params_container; params_container = ParamsContainer(reporter)

Notice here that the constructor, ParamsContainer(reporter) contains
a reference to a StatsReporter object.  This is optional.  If a reporter
is provided, then a record of the parameters will be written to the
reporter's output file. If not, the record will be displayed in the
console window (with the rest of the CC3D output).

ParamsContainer Public Methods
==============================

inputParamsFromFile(file, folder='./')
---------------------------------
This method tells the ParamsContainer to read parameter settings from a
specific file. The *file* parameter is required.  The *folder* parameter
is optional and defaults to the current folder. 

NOTE: The default value './' may need to be different on a Windows
platform.

For example:

    params_dict = params_container.inputParamsFromFile('params', folder='../tcseg/Simulation/')
   
In this case the parameter file will be assued to be 'params.txt' and its
folder is given by a relative path name. Notice that the
result of this method call is assigned to a variable (params_dict).  A
*dictionary* (dict) is a Python object that stores data in the form of
attribue/value pairs, such as a=10, b=20.  

The reference to params_containeris used to pass it to other objects,
e.g., to the various Steppables objects. In this case we are possing
both a StatsReporter and the ParamsContainer dictionary to a
Steppables object:

   mitosis = RegionalMitosis(sim,_frequency = 1, _params_container = params_container, _stats_reporter = reporter)

The Params File
===============

Parameter settings are given 1 per line in the format:

  ParamName ParamValue

For example,

  Dx 750
  Dy 450
  batch False
  r_mitosis_R1 [0.0, 0.5, 0.5]

The names are important, because that is how they will be retrieved
during the simulation run. 

The params.txt file can contain blank lines and comment lines, so the
parameters can be organized by sections:

   # Control Parameters

   Dx 320
   Dy 910
   speed_up_sim False
   batch False
   hinder_cells_near_EN False

   # Dye Labeling parameters
   dye_flag 0
   x0_dye  110
   xf_dye  150
   y0_dye  520
   yf_dye  560

   ## *************** Mitosis Parameters  **************
   regional_mitosis_flag 1

   ## Mitosis Border Percent
   ## **********************
   ## The position, in fraction of the GZ (from posteriormost EN stripe to posterior of GZ,
   ## of the border between mitosis regions in the GZ (measured from the posterior)

   y_GZ_mitosis_border_percent 0.5  

Retrieving Parameters
=====================

Currently the ParamsContainer class supports three types of parameter
values, boolean (True/False), numeric (5, 5.1), and lists ([1,2,3]). So
it is necessary to know the type of the value because different method
are used to retrieve parameters of different types.

getNumberParam(key)
===================
This method is used for retrieving numeric parameters. The *key* here
represents the parameter name:

  dye_flag = params_container.getNumberParam('dye_flag')

getBooleanPram(key)
===================
This is used for retrieving boolean parameters, those that have
the values True or False:

    global batch; 
    batch = params_container.getBooleanParam('batch')

getListPram(key)
===================
This is used for retrieving listparameters, those that have
a Python list, [1,2,3] or ['a','b','c'], as their values:

    self.r_mitosis_R3 = self.params_container.getListParam('r_mitosis_R3')

Future Enhancements
===================

Of course, it is possible to provide additional enhancements and features
as we gain more experience in using this set up.  Here's a preliminary TODO
list:

1) Remove the dependency on path names.  

Ideally, the path names to the 'runs' folder and the 'params.txt' files
should be input as data rather than specified in the Python code.  This
is a little tricky because curretnly CC3D just assumes that its folder
is the *current working directory*.  One approach might be to locate a
small *bootstrap* parameter file there that would provide the simulation's
home directory.  Another approach would be to modify the CC3D startup script.

2) Providing a parameter to name the output file.  Instead of having them
all named 'run<timestamp>', it should be possible to name them more
descriptively, e.g., 'run<timestamp>-GZ-size.txt'.

3) Additional formatting options.  We may eventually want fairly 
customized formatting options to make it easier to analyze the report
data -- e.g., a comma-separated values (CSV) with ta heading?





 





